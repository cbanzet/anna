import { Directive, Inject, ElementRef, EventEmitter, Output, Renderer2, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { DOCUMENT } from '@angular/platform-browser';
import { ScrollTrackerService } from './scroll-tracker.service';
var ScrollTrackerDirective = (function () {
    function ScrollTrackerDirective(_element_ref, _scrollTrackerService, _renderer2, _document, _platform_id) {
        this._element_ref = _element_ref;
        this._scrollTrackerService = _scrollTrackerService;
        this._renderer2 = _renderer2;
        this._document = _document;
        this._platform_id = _platform_id;
        this.ngxScrollTrackerHandler = new EventEmitter();
    }
    /**
     * Angular Lifecycle Hook - After Content Init
     * @source https://angular.io/api/core/AfterContentInit
     *
     * @returns void
     */
    ScrollTrackerDirective.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (isPlatformServer(this._platform_id))
            return;
        // Kicks off the next Angular Lifecycle
        setTimeout(function (__HACK__) {
            // Subscribe to Scroll Events...
            _this._subscription = _this._scrollTrackerService
                .register(_this._element_ref, _this._renderer2)
                .finally(function () { return _this._cleanup(); })
                .subscribe(function (value) { return _this.ngxScrollTrackerHandler.emit(value); }, function (error) { return console.error(error); });
        });
    };
    /**
     * Angular Lifecycle Hook - On Destroy
     * @source https://angular.io/api/core/OnDestroy
     *
     * @returns void
     */
    ScrollTrackerDirective.prototype.ngOnDestroy = function () {
        if (isPlatformServer(this._platform_id))
            return;
        this._cleanup();
    };
    /**
     * Clean up subscription.
     *
     * @return void
     */
    ScrollTrackerDirective.prototype._cleanup = function () {
        this._subscription.unsubscribe();
    };
    return ScrollTrackerDirective;
}());
export { ScrollTrackerDirective };
ScrollTrackerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngx-scroll-tracker]'
            },] },
];
/** @nocollapse */
ScrollTrackerDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: ScrollTrackerService, },
    { type: Renderer2, },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
]; };
ScrollTrackerDirective.propDecorators = {
    'ngxScrollTrackerHandler': [{ type: Output, args: ['ngx-scroll-tracker',] },],
};
//# sourceMappingURL=scroll-tracker.directive.js.map