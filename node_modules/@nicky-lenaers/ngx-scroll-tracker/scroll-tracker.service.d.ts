import { ElementRef, Renderer2 } from '@angular/core';
import { Observable } from 'rxjs';
export declare class ScrollTrackerService {
    private _container_manager;
    constructor();
    /**
     * Register a new Element to be tracked for scrolling.
     *
     * @param element_ref 			The Element Reference
     * @param renderer2 			The Angular RendererV2
     * @returns 					An RxJS Observable
     */
    register(element_ref: ElementRef, renderer2: Renderer2): Observable<any>;
    /**
     * Retrieves the Listener target.
     *
     * @param container 				The HTML Container Element
     * @returns 						The Listener Object
     */
    private _getListenerTarget(container);
    /**
     * Evaluate whether the registered Element is in the view or not.
     *
     * @param container 				The Container the Element belongs to
     * @returns void
     */
    private _isElementInContainerView(event, container);
    /**
     * Test if a given Element is the Window.
     *
     * @param container 				The given Element
     * @returns 						Boolean if given Element is Window
     */
    private _isWindow(container);
    /**
     * Find the first scrollable parent node of an element.
     *
     * @param nativeElement 			The element to search from
     * @param includeHidden 			Whether to include hidden elements or not
     * @returns 						The first scrollable parent node
     */
    private _getFirstScrollableParentNode(nativeElement, includeHidden?);
    /**
     * Unregisters an Element from being tracked for scrolling.
     *
     * @param element  			The Element to unregister
     * @returns void
     */
    private _unregister(element);
}
