import { Injectable, NgZone, NgModule, Directive, ElementRef, EventEmitter, Inject, Input, Output, PLATFORM_ID, defineInjectable, inject } from '@angular/core';
import { Subject, Subscription } from 'rxjs';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { filter } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
const InViewportConfigDirection = {
    BOTH: 'both',
    VERTICAL: 'vertical',
    HORIZONTAL: 'horizontal',
};
const /** @type {?} */ DEFAULT_THRESHOLD = [0, 1];
class InViewportConfig {
    /**
     * @param {?=} options
     */
    constructor(options) {
        this._rootMargin = '0px 0px 0px 0px';
        this._threshold = [...DEFAULT_THRESHOLD];
        this._partial = true;
        this._direction = InViewportConfigDirection.BOTH;
        if (Object.prototype.toString.call(options) === '[object Object]') {
            ['root', 'rootMargin', 'threshold', 'partial', 'direction', 'checkFn'].forEach((prop) => {
                if (options.hasOwnProperty(prop)) {
                    this[prop] = options[prop];
                }
            });
        }
    }
    /**
     * @return {?}
     */
    get root() {
        return this._root;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set root(value) {
        this._root = value && value.nodeType === 1 ? value : undefined;
    }
    /**
     * @return {?}
     */
    get rootMargin() {
        return this._rootMargin;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set rootMargin(value) {
        this._rootMargin = value && typeof value === 'string' ? value : '0px 0px 0px 0px';
    }
    /**
     * @return {?}
     */
    get threshold() {
        return this._threshold;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set threshold(value) {
        let /** @type {?} */ threshold = [];
        const /** @type {?} */ isValidThreshold = (val) => typeof val === 'number' && val >= 0 && val <= 1;
        if (isValidThreshold(value)) {
            threshold = [value];
        }
        else if (Array.isArray(value) && value.length) {
            threshold = value.filter((val) => isValidThreshold(val));
        }
        if (threshold.length === 0) {
            threshold = [...DEFAULT_THRESHOLD];
        }
        this._threshold = threshold;
    }
    /**
     * @return {?}
     */
    get partial() {
        return this._partial;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set partial(value) {
        this._partial = !!value;
    }
    /**
     * @return {?}
     */
    get direction() {
        return this._direction;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set direction(value) {
        const /** @type {?} */ isValidValue = (val) => {
            return ([
                InViewportConfigDirection.BOTH,
                InViewportConfigDirection.HORIZONTAL,
                InViewportConfigDirection.VERTICAL
            ].indexOf(val) >= 0);
        };
        this._direction = isValidValue(value) ? value : InViewportConfigDirection.BOTH;
    }
    /**
     * @return {?}
     */
    get checkFn() {
        return this._checkFn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set checkFn(value) {
        this._checkFn = value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class InViewportService {
    /**
     * @param {?} ngZone
     */
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.trigger$ = new Subject();
        this.registry = [];
    }
    /**
     * @param {?} entries
     * @return {?}
     */
    emitTrigger(entries) {
        if (Array.isArray(entries) && entries.length) {
            entries.forEach((entry) => this.trigger$.next(entry));
        }
    }
    /**
     * @param {?=} element
     * @return {?}
     */
    getRootElement(element) {
        return element && element.nodeType === Node.ELEMENT_NODE ? element : undefined;
    }
    /**
     * @param {?} root
     * @return {?}
     */
    findEntry(root) {
        return this.registry.find((entry) => entry.root === this.getRootElement(root));
    }
    /**
     * @param {?} target
     * @param {?} config
     * @return {?}
     */
    register(target, config) {
        this.ngZone.runOutsideAngular(() => {
            const /** @type {?} */ foundedEntry = this.findEntry(config.root);
            if (foundedEntry && !foundedEntry.targets.has(target)) {
                foundedEntry.targets.add(target);
                foundedEntry.observer.observe(target);
            }
            else {
                const /** @type {?} */ options = {
                    root: this.getRootElement(config.root),
                    rootMargin: config.rootMargin,
                    threshold: config.threshold
                };
                const /** @type {?} */ entry = {
                    root: this.getRootElement(config.root),
                    targets: new Set([target]),
                    observer: new IntersectionObserver((entries) => this.ngZone.run(() => this.emitTrigger(entries)), options)
                };
                entry.observer.observe(target);
                this.registry = [...this.registry, entry];
            }
        });
    }
    /**
     * @param {?} target
     * @param {?} config
     * @return {?}
     */
    unregister(target, config) {
        this.ngZone.runOutsideAngular(() => {
            const /** @type {?} */ foundedEntry = this.findEntry(config.root);
            if (foundedEntry) {
                const { observer, targets } = foundedEntry;
                if (targets.has(target)) {
                    observer.unobserve(target);
                    targets.delete(target);
                }
                if (targets.size === 0) {
                    observer.disconnect();
                    this.registry = this.registry.filter((entry) => entry !== foundedEntry);
                }
            }
        });
    }
}
InViewportService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
InViewportService.ctorParameters = () => [
    { type: NgZone, },
];
/** @nocollapse */ InViewportService.ngInjectableDef = defineInjectable({ factory: function InViewportService_Factory() { return new InViewportService(inject(NgZone)); }, token: InViewportService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ InViewportMetadata = Symbol('InViewportMetadata');
class InViewportDirective {
    /**
     * @param {?} platformId
     * @param {?} elementRef
     * @param {?} inViewport
     */
    constructor(platformId, elementRef, inViewport) {
        this.platformId = platformId;
        this.elementRef = elementRef;
        this.inViewport = inViewport;
        this.config = new InViewportConfig();
        this.subscription = new Subscription();
        this.inViewportAction = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set options(value) {
        this.config = new InViewportConfig(value);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.inViewport.register(this.elementRef.nativeElement, this.config);
            this.subscription.add(this.inViewport.trigger$
                .pipe(filter((entry) => entry && entry.target === this.elementRef.nativeElement))
                .subscribe((entry) => this.emitAction(entry, false)));
        }
        else {
            this.emitAction(undefined, true);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
        if (isPlatformBrowser(this.platformId)) {
            this.inViewport.unregister(this.elementRef.nativeElement, this.config);
        }
    }
    /**
     * @param {?} entry
     * @param {?} force
     * @return {?}
     */
    check(entry, force) {
        const /** @type {?} */ isVisible = () => {
            const /** @type {?} */ partiallyVisible = entry.isIntersecting || entry.intersectionRatio > 0;
            const /** @type {?} */ completelyVisible = entry.intersectionRatio >= 1;
            return this.config.partial ? partiallyVisible : completelyVisible;
        };
        const /** @type {?} */ visible = force || !entry || isVisible();
        return { [InViewportMetadata]: { entry }, target: this.elementRef.nativeElement, visible };
    }
    /**
     * @param {?} entry
     * @param {?} force
     * @return {?}
     */
    emitAction(entry, force) {
        const /** @type {?} */ event = this.config.checkFn
            ? this.config.checkFn(entry, { force, config: this.config })
            : this.check(entry, force);
        this.inViewportAction.emit(event);
    }
}
InViewportDirective.decorators = [
    { type: Directive, args: [{
                selector: '[inViewport]'
            },] },
];
/** @nocollapse */
InViewportDirective.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    { type: ElementRef, },
    { type: InViewportService, },
];
InViewportDirective.propDecorators = {
    "options": [{ type: Input, args: ['inViewportOptions',] },],
    "inViewportAction": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class InViewportModule {
}
InViewportModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [InViewportDirective],
                exports: [InViewportDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { InViewportModule, InViewportMetadata, InViewportDirective, InViewportService, InViewportConfigDirection, InViewportConfig };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,