(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ng-in-viewport', ['exports', '@angular/core', 'rxjs', '@angular/common', 'rxjs/operators'], factory) :
    (factory((global['ng-in-viewport'] = {}),global.ng.core,global.rxjs,global.ng.common,global.rxjs.operators));
}(this, (function (exports,i0,rxjs,common,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {string} */
    var InViewportConfigDirection = {
        BOTH: 'both',
        VERTICAL: 'vertical',
        HORIZONTAL: 'horizontal',
    };
    var /** @type {?} */ DEFAULT_THRESHOLD = [0, 1];
    var InViewportConfig = (function () {
        function InViewportConfig(options) {
            var _this = this;
            this._rootMargin = '0px 0px 0px 0px';
            this._threshold = __spread(DEFAULT_THRESHOLD);
            this._partial = true;
            this._direction = InViewportConfigDirection.BOTH;
            if (Object.prototype.toString.call(options) === '[object Object]') {
                ['root', 'rootMargin', 'threshold', 'partial', 'direction', 'checkFn'].forEach(function (prop) {
                    if (options.hasOwnProperty(prop)) {
                        _this[prop] = options[prop];
                    }
                });
            }
        }
        Object.defineProperty(InViewportConfig.prototype, "root", {
            get: /**
             * @return {?}
             */ function () {
                return this._root;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._root = value && value.nodeType === 1 ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InViewportConfig.prototype, "rootMargin", {
            get: /**
             * @return {?}
             */ function () {
                return this._rootMargin;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._rootMargin = value && typeof value === 'string' ? value : '0px 0px 0px 0px';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InViewportConfig.prototype, "threshold", {
            get: /**
             * @return {?}
             */ function () {
                return this._threshold;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var /** @type {?} */ threshold = [];
                var /** @type {?} */ isValidThreshold = function (val) { return typeof val === 'number' && val >= 0 && val <= 1; };
                if (isValidThreshold(value)) {
                    threshold = [value];
                }
                else if (Array.isArray(value) && value.length) {
                    threshold = value.filter(function (val) { return isValidThreshold(val); });
                }
                if (threshold.length === 0) {
                    threshold = __spread(DEFAULT_THRESHOLD);
                }
                this._threshold = threshold;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InViewportConfig.prototype, "partial", {
            get: /**
             * @return {?}
             */ function () {
                return this._partial;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._partial = !!value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InViewportConfig.prototype, "direction", {
            get: /**
             * @return {?}
             */ function () {
                return this._direction;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var /** @type {?} */ isValidValue = function (val) {
                    return ([
                        InViewportConfigDirection.BOTH,
                        InViewportConfigDirection.HORIZONTAL,
                        InViewportConfigDirection.VERTICAL
                    ].indexOf(val) >= 0);
                };
                this._direction = isValidValue(value) ? value : InViewportConfigDirection.BOTH;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InViewportConfig.prototype, "checkFn", {
            get: /**
             * @return {?}
             */ function () {
                return this._checkFn;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._checkFn = value;
            },
            enumerable: true,
            configurable: true
        });
        return InViewportConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var InViewportService = (function () {
        function InViewportService(ngZone) {
            this.ngZone = ngZone;
            this.trigger$ = new rxjs.Subject();
            this.registry = [];
        }
        /**
         * @param {?} entries
         * @return {?}
         */
        InViewportService.prototype.emitTrigger = /**
         * @param {?} entries
         * @return {?}
         */
            function (entries) {
                var _this = this;
                if (Array.isArray(entries) && entries.length) {
                    entries.forEach(function (entry) { return _this.trigger$.next(entry); });
                }
            };
        /**
         * @param {?=} element
         * @return {?}
         */
        InViewportService.prototype.getRootElement = /**
         * @param {?=} element
         * @return {?}
         */
            function (element) {
                return element && element.nodeType === Node.ELEMENT_NODE ? element : undefined;
            };
        /**
         * @param {?} root
         * @return {?}
         */
        InViewportService.prototype.findEntry = /**
         * @param {?} root
         * @return {?}
         */
            function (root) {
                var _this = this;
                return this.registry.find(function (entry) { return entry.root === _this.getRootElement(root); });
            };
        /**
         * @param {?} target
         * @param {?} config
         * @return {?}
         */
        InViewportService.prototype.register = /**
         * @param {?} target
         * @param {?} config
         * @return {?}
         */
            function (target, config) {
                var _this = this;
                this.ngZone.runOutsideAngular(function () {
                    var /** @type {?} */ foundedEntry = _this.findEntry(config.root);
                    if (foundedEntry && !foundedEntry.targets.has(target)) {
                        foundedEntry.targets.add(target);
                        foundedEntry.observer.observe(target);
                    }
                    else {
                        var /** @type {?} */ options = {
                            root: _this.getRootElement(config.root),
                            rootMargin: config.rootMargin,
                            threshold: config.threshold
                        };
                        var /** @type {?} */ entry = {
                            root: _this.getRootElement(config.root),
                            targets: new Set([target]),
                            observer: new IntersectionObserver(function (entries) { return _this.ngZone.run(function () { return _this.emitTrigger(entries); }); }, options)
                        };
                        entry.observer.observe(target);
                        _this.registry = __spread(_this.registry, [entry]);
                    }
                });
            };
        /**
         * @param {?} target
         * @param {?} config
         * @return {?}
         */
        InViewportService.prototype.unregister = /**
         * @param {?} target
         * @param {?} config
         * @return {?}
         */
            function (target, config) {
                var _this = this;
                this.ngZone.runOutsideAngular(function () {
                    var /** @type {?} */ foundedEntry = _this.findEntry(config.root);
                    if (foundedEntry) {
                        var observer = foundedEntry.observer, targets = foundedEntry.targets;
                        if (targets.has(target)) {
                            observer.unobserve(target);
                            targets.delete(target);
                        }
                        if (targets.size === 0) {
                            observer.disconnect();
                            _this.registry = _this.registry.filter(function (entry) { return entry !== foundedEntry; });
                        }
                    }
                });
            };
        InViewportService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        InViewportService.ctorParameters = function () {
            return [
                { type: i0.NgZone, },
            ];
        };
        /** @nocollapse */ InViewportService.ngInjectableDef = i0.defineInjectable({ factory: function InViewportService_Factory() { return new InViewportService(i0.inject(i0.NgZone)); }, token: InViewportService, providedIn: "root" });
        return InViewportService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ InViewportMetadata = Symbol('InViewportMetadata');
    var InViewportDirective = (function () {
        function InViewportDirective(platformId, elementRef, inViewport) {
            this.platformId = platformId;
            this.elementRef = elementRef;
            this.inViewport = inViewport;
            this.config = new InViewportConfig();
            this.subscription = new rxjs.Subscription();
            this.inViewportAction = new i0.EventEmitter();
        }
        Object.defineProperty(InViewportDirective.prototype, "options", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.config = new InViewportConfig(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        InViewportDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (common.isPlatformBrowser(this.platformId)) {
                    this.inViewport.register(this.elementRef.nativeElement, this.config);
                    this.subscription.add(this.inViewport.trigger$
                        .pipe(operators.filter(function (entry) { return entry && entry.target === _this.elementRef.nativeElement; }))
                        .subscribe(function (entry) { return _this.emitAction(entry, false); }));
                }
                else {
                    this.emitAction(undefined, true);
                }
            };
        /**
         * @return {?}
         */
        InViewportDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.subscription.unsubscribe();
                if (common.isPlatformBrowser(this.platformId)) {
                    this.inViewport.unregister(this.elementRef.nativeElement, this.config);
                }
            };
        /**
         * @param {?} entry
         * @param {?} force
         * @return {?}
         */
        InViewportDirective.prototype.check = /**
         * @param {?} entry
         * @param {?} force
         * @return {?}
         */
            function (entry, force) {
                var _this = this;
                var /** @type {?} */ isVisible = function () {
                    var /** @type {?} */ partiallyVisible = entry.isIntersecting || entry.intersectionRatio > 0;
                    var /** @type {?} */ completelyVisible = entry.intersectionRatio >= 1;
                    return _this.config.partial ? partiallyVisible : completelyVisible;
                };
                var /** @type {?} */ visible = force || !entry || isVisible();
                return _a = {}, _a[InViewportMetadata] = { entry: entry }, _a.target = this.elementRef.nativeElement, _a.visible = visible, _a;
                var _a;
            };
        /**
         * @param {?} entry
         * @param {?} force
         * @return {?}
         */
        InViewportDirective.prototype.emitAction = /**
         * @param {?} entry
         * @param {?} force
         * @return {?}
         */
            function (entry, force) {
                var /** @type {?} */ event = this.config.checkFn
                    ? this.config.checkFn(entry, { force: force, config: this.config })
                    : this.check(entry, force);
                this.inViewportAction.emit(event);
            };
        InViewportDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[inViewport]'
                    },] },
        ];
        /** @nocollapse */
        InViewportDirective.ctorParameters = function () {
            return [
                { type: Object, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] },] },
                { type: i0.ElementRef, },
                { type: InViewportService, },
            ];
        };
        InViewportDirective.propDecorators = {
            "options": [{ type: i0.Input, args: ['inViewportOptions',] },],
            "inViewportAction": [{ type: i0.Output },],
        };
        return InViewportDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var InViewportModule = (function () {
        function InViewportModule() {
        }
        InViewportModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [InViewportDirective],
                        exports: [InViewportDirective]
                    },] },
        ];
        return InViewportModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.InViewportModule = InViewportModule;
    exports.InViewportMetadata = InViewportMetadata;
    exports.InViewportDirective = InViewportDirective;
    exports.InViewportService = InViewportService;
    exports.InViewportConfigDirection = InViewportConfigDirection;
    exports.InViewportConfig = InViewportConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,