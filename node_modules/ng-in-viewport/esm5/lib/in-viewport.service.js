/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function InViewportRegistryEntry() { }
function InViewportRegistryEntry_tsickle_Closure_declarations() {
    /** @type {?} */
    InViewportRegistryEntry.prototype.root;
    /** @type {?} */
    InViewportRegistryEntry.prototype.targets;
    /** @type {?} */
    InViewportRegistryEntry.prototype.observer;
}
var InViewportService = /** @class */ (function () {
    function InViewportService(ngZone) {
        this.ngZone = ngZone;
        this.trigger$ = new Subject();
        this.registry = [];
    }
    /**
     * @param {?} entries
     * @return {?}
     */
    InViewportService.prototype.emitTrigger = /**
     * @param {?} entries
     * @return {?}
     */
    function (entries) {
        var _this = this;
        if (Array.isArray(entries) && entries.length) {
            entries.forEach(function (entry) { return _this.trigger$.next(entry); });
        }
    };
    /**
     * @param {?=} element
     * @return {?}
     */
    InViewportService.prototype.getRootElement = /**
     * @param {?=} element
     * @return {?}
     */
    function (element) {
        return element && element.nodeType === Node.ELEMENT_NODE ? element : undefined;
    };
    /**
     * @param {?} root
     * @return {?}
     */
    InViewportService.prototype.findEntry = /**
     * @param {?} root
     * @return {?}
     */
    function (root) {
        var _this = this;
        return this.registry.find(function (entry) { return entry.root === _this.getRootElement(root); });
    };
    /**
     * @param {?} target
     * @param {?} config
     * @return {?}
     */
    InViewportService.prototype.register = /**
     * @param {?} target
     * @param {?} config
     * @return {?}
     */
    function (target, config) {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            var /** @type {?} */ foundedEntry = _this.findEntry(config.root);
            if (foundedEntry && !foundedEntry.targets.has(target)) {
                foundedEntry.targets.add(target);
                foundedEntry.observer.observe(target);
            }
            else {
                var /** @type {?} */ options = {
                    root: _this.getRootElement(config.root),
                    rootMargin: config.rootMargin,
                    threshold: config.threshold
                };
                var /** @type {?} */ entry = {
                    root: _this.getRootElement(config.root),
                    targets: new Set([target]),
                    observer: new IntersectionObserver(function (entries) { return _this.ngZone.run(function () { return _this.emitTrigger(entries); }); }, options)
                };
                entry.observer.observe(target);
                _this.registry = tslib_1.__spread(_this.registry, [entry]);
            }
        });
    };
    /**
     * @param {?} target
     * @param {?} config
     * @return {?}
     */
    InViewportService.prototype.unregister = /**
     * @param {?} target
     * @param {?} config
     * @return {?}
     */
    function (target, config) {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            var /** @type {?} */ foundedEntry = _this.findEntry(config.root);
            if (foundedEntry) {
                var observer = foundedEntry.observer, targets = foundedEntry.targets;
                if (targets.has(target)) {
                    observer.unobserve(target);
                    targets.delete(target);
                }
                if (targets.size === 0) {
                    observer.disconnect();
                    _this.registry = _this.registry.filter(function (entry) { return entry !== foundedEntry; });
                }
            }
        });
    };
    InViewportService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    InViewportService.ctorParameters = function () { return [
        { type: NgZone, },
    ]; };
    /** @nocollapse */ InViewportService.ngInjectableDef = i0.defineInjectable({ factory: function InViewportService_Factory() { return new InViewportService(i0.inject(i0.NgZone)); }, token: InViewportService, providedIn: "root" });
    return InViewportService;
}());
export { InViewportService };
function InViewportService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    InViewportService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    InViewportService.ctorParameters;
    /** @type {?} */
    InViewportService.prototype.trigger$;
    /** @type {?} */
    InViewportService.prototype.registry;
    /** @type {?} */
    InViewportService.prototype.ngZone;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW4tdmlld3BvcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWluLXZpZXdwb3J0LyIsInNvdXJjZXMiOlsibGliL2luLXZpZXdwb3J0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7SUFtQjdCLDJCQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTt3QkFIWSxJQUFJLE9BQU8sRUFBNkI7d0JBQy9DLEVBQUU7S0FFSDs7Ozs7SUFFOUIsdUNBQVc7Ozs7Y0FBQyxPQUFvQzs7UUFDdEQsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM3QyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQXpCLENBQXlCLENBQUMsQ0FBQztTQUN2RDs7Ozs7O0lBR0ssMENBQWM7Ozs7Y0FBQyxPQUFpQjtRQUN0QyxNQUFNLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7Ozs7OztJQUd6RSxxQ0FBUzs7OztjQUFDLElBQWE7O1FBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLEtBQUssQ0FBQyxJQUFJLEtBQUssS0FBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBeEMsQ0FBd0MsQ0FBQyxDQUFDOzs7Ozs7O0lBRzFFLG9DQUFROzs7OztjQUFDLE1BQWUsRUFBRSxNQUF3Qjs7UUFDdkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztZQUM1QixxQkFBTSxZQUFZLEdBQUcsS0FBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakQsRUFBRSxDQUFDLENBQUMsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDakMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixxQkFBTSxPQUFPLEdBQVE7b0JBQ25CLElBQUksRUFBRSxLQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7b0JBQ3RDLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVTtvQkFDN0IsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO2lCQUM1QixDQUFDO2dCQUNGLHFCQUFNLEtBQUssR0FBNEI7b0JBQ3JDLElBQUksRUFBRSxLQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7b0JBQ3RDLE9BQU8sRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUMxQixRQUFRLEVBQUUsSUFBSSxvQkFBb0IsQ0FDaEMsVUFBQyxPQUFvQyxJQUFLLE9BQUEsS0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQXpCLENBQXlCLENBQUMsRUFBaEQsQ0FBZ0QsRUFDMUYsT0FBTyxDQUNSO2lCQUNGLENBQUM7Z0JBQ0YsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQy9CLEtBQUksQ0FBQyxRQUFRLG9CQUFPLEtBQUksQ0FBQyxRQUFRLEdBQUUsS0FBSyxFQUFDLENBQUM7YUFDM0M7U0FDRixDQUFDLENBQUM7Ozs7Ozs7SUFHRSxzQ0FBVTs7Ozs7Y0FBQyxNQUFlLEVBQUUsTUFBd0I7O1FBQ3pELElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUM7WUFDNUIscUJBQU0sWUFBWSxHQUFHLEtBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pELEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQ1QsSUFBQSxnQ0FBUSxFQUFFLDhCQUFPLENBQWtCO2dCQUMzQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDeEIsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDM0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDeEI7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN2QixRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7b0JBQ3RCLEtBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQyxLQUFLLElBQUssT0FBQSxLQUFLLEtBQUssWUFBWSxFQUF0QixDQUFzQixDQUFDLENBQUM7aUJBQ3pFO2FBQ0Y7U0FDRixDQUFDLENBQUM7OztnQkEvRE4sVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFmb0IsTUFBTTs7OzRCQUEzQjs7U0FnQmEsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJblZpZXdwb3J0Q29uZmlnIH0gZnJvbSAnLi9pbi12aWV3cG9ydC1jb25maWcnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEluVmlld3BvcnRSZWdpc3RyeUVudHJ5IHtcbiAgcm9vdDogRWxlbWVudDtcbiAgdGFyZ2V0czogU2V0PEVsZW1lbnQ+O1xuICBvYnNlcnZlcjogSW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XG59XG5cbmV4cG9ydCB0eXBlIEluVmlld3BvcnRUcmlnZ2VyID0gU3ViamVjdDxJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5PjtcbmV4cG9ydCB0eXBlIEluVmlld3BvcnRSZWdpc3RyeSA9IEluVmlld3BvcnRSZWdpc3RyeUVudHJ5W107XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEluVmlld3BvcnRTZXJ2aWNlIHtcbiAgcHVibGljIHJlYWRvbmx5IHRyaWdnZXIkOiBJblZpZXdwb3J0VHJpZ2dlciA9IG5ldyBTdWJqZWN0PEludGVyc2VjdGlvbk9ic2VydmVyRW50cnk+KCk7XG4gIHByaXZhdGUgcmVnaXN0cnk6IEluVmlld3BvcnRSZWdpc3RyeSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHt9XG5cbiAgcHJpdmF0ZSBlbWl0VHJpZ2dlcihlbnRyaWVzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W10pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlbnRyaWVzKSAmJiBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4gdGhpcy50cmlnZ2VyJC5uZXh0KGVudHJ5KSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRSb290RWxlbWVudChlbGVtZW50PzogRWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFID8gZWxlbWVudCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByaXZhdGUgZmluZEVudHJ5KHJvb3Q6IEVsZW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5maW5kKChlbnRyeSkgPT4gZW50cnkucm9vdCA9PT0gdGhpcy5nZXRSb290RWxlbWVudChyb290KSk7XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXIodGFyZ2V0OiBFbGVtZW50LCBjb25maWc6IEluVmlld3BvcnRDb25maWcpOiB2b2lkIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBjb25zdCBmb3VuZGVkRW50cnkgPSB0aGlzLmZpbmRFbnRyeShjb25maWcucm9vdCk7XG4gICAgICBpZiAoZm91bmRlZEVudHJ5ICYmICFmb3VuZGVkRW50cnkudGFyZ2V0cy5oYXModGFyZ2V0KSkge1xuICAgICAgICBmb3VuZGVkRW50cnkudGFyZ2V0cy5hZGQodGFyZ2V0KTtcbiAgICAgICAgZm91bmRlZEVudHJ5Lm9ic2VydmVyLm9ic2VydmUodGFyZ2V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnM6IGFueSA9IHtcbiAgICAgICAgICByb290OiB0aGlzLmdldFJvb3RFbGVtZW50KGNvbmZpZy5yb290KSxcbiAgICAgICAgICByb290TWFyZ2luOiBjb25maWcucm9vdE1hcmdpbixcbiAgICAgICAgICB0aHJlc2hvbGQ6IGNvbmZpZy50aHJlc2hvbGRcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZW50cnk6IEluVmlld3BvcnRSZWdpc3RyeUVudHJ5ID0ge1xuICAgICAgICAgIHJvb3Q6IHRoaXMuZ2V0Um9vdEVsZW1lbnQoY29uZmlnLnJvb3QpLFxuICAgICAgICAgIHRhcmdldHM6IG5ldyBTZXQoW3RhcmdldF0pLFxuICAgICAgICAgIG9ic2VydmVyOiBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXG4gICAgICAgICAgICAoZW50cmllczogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVtdKSA9PiB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5lbWl0VHJpZ2dlcihlbnRyaWVzKSksXG4gICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgKVxuICAgICAgICB9O1xuICAgICAgICBlbnRyeS5vYnNlcnZlci5vYnNlcnZlKHRhcmdldCk7XG4gICAgICAgIHRoaXMucmVnaXN0cnkgPSBbLi4udGhpcy5yZWdpc3RyeSwgZW50cnldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHVucmVnaXN0ZXIodGFyZ2V0OiBFbGVtZW50LCBjb25maWc6IEluVmlld3BvcnRDb25maWcpOiB2b2lkIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBjb25zdCBmb3VuZGVkRW50cnkgPSB0aGlzLmZpbmRFbnRyeShjb25maWcucm9vdCk7XG4gICAgICBpZiAoZm91bmRlZEVudHJ5KSB7XG4gICAgICAgIGNvbnN0IHsgb2JzZXJ2ZXIsIHRhcmdldHMgfSA9IGZvdW5kZWRFbnRyeTtcbiAgICAgICAgaWYgKHRhcmdldHMuaGFzKHRhcmdldCkpIHtcbiAgICAgICAgICBvYnNlcnZlci51bm9ic2VydmUodGFyZ2V0KTtcbiAgICAgICAgICB0YXJnZXRzLmRlbGV0ZSh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YXJnZXRzLnNpemUgPT09IDApIHtcbiAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgdGhpcy5yZWdpc3RyeSA9IHRoaXMucmVnaXN0cnkuZmlsdGVyKChlbnRyeSkgPT4gZW50cnkgIT09IGZvdW5kZWRFbnRyeSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19