/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
/** @enum {string} */
var InViewportConfigDirection = {
    BOTH: 'both',
    VERTICAL: 'vertical',
    HORIZONTAL: 'horizontal',
};
export { InViewportConfigDirection };
/**
 * @record
 */
export function InViewportConfigCheckFnOptions() { }
function InViewportConfigCheckFnOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    InViewportConfigCheckFnOptions.prototype.force;
    /** @type {?} */
    InViewportConfigCheckFnOptions.prototype.config;
}
/**
 * @record
 */
export function InViewportConfigOptions() { }
function InViewportConfigOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    InViewportConfigOptions.prototype.root;
    /** @type {?|undefined} */
    InViewportConfigOptions.prototype.rootMargin;
    /** @type {?|undefined} */
    InViewportConfigOptions.prototype.threshold;
    /** @type {?|undefined} */
    InViewportConfigOptions.prototype.partial;
    /** @type {?|undefined} */
    InViewportConfigOptions.prototype.direction;
    /** @type {?|undefined} */
    InViewportConfigOptions.prototype.checkFn;
}
var /** @type {?} */ DEFAULT_THRESHOLD = [0, 1];
var InViewportConfig = /** @class */ (function () {
    function InViewportConfig(options) {
        var _this = this;
        this._rootMargin = '0px 0px 0px 0px';
        this._threshold = tslib_1.__spread(DEFAULT_THRESHOLD);
        this._partial = true;
        this._direction = InViewportConfigDirection.BOTH;
        if (Object.prototype.toString.call(options) === '[object Object]') {
            ['root', 'rootMargin', 'threshold', 'partial', 'direction', 'checkFn'].forEach(function (prop) {
                if (options.hasOwnProperty(prop)) {
                    _this[prop] = options[prop];
                }
            });
        }
    }
    Object.defineProperty(InViewportConfig.prototype, "root", {
        get: /**
         * @return {?}
         */
        function () {
            return this._root;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._root = value && value.nodeType === 1 ? value : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InViewportConfig.prototype, "rootMargin", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rootMargin;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._rootMargin = value && typeof value === 'string' ? value : '0px 0px 0px 0px';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InViewportConfig.prototype, "threshold", {
        get: /**
         * @return {?}
         */
        function () {
            return this._threshold;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var /** @type {?} */ threshold = [];
            var /** @type {?} */ isValidThreshold = function (val) { return typeof val === 'number' && val >= 0 && val <= 1; };
            if (isValidThreshold(value)) {
                threshold = [value];
            }
            else if (Array.isArray(value) && value.length) {
                threshold = value.filter(function (val) { return isValidThreshold(val); });
            }
            if (threshold.length === 0) {
                threshold = tslib_1.__spread(DEFAULT_THRESHOLD);
            }
            this._threshold = threshold;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InViewportConfig.prototype, "partial", {
        get: /**
         * @return {?}
         */
        function () {
            return this._partial;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._partial = !!value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InViewportConfig.prototype, "direction", {
        get: /**
         * @return {?}
         */
        function () {
            return this._direction;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var /** @type {?} */ isValidValue = function (val) {
                return ([
                    InViewportConfigDirection.BOTH,
                    InViewportConfigDirection.HORIZONTAL,
                    InViewportConfigDirection.VERTICAL
                ].indexOf(val) >= 0);
            };
            this._direction = isValidValue(value) ? value : InViewportConfigDirection.BOTH;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InViewportConfig.prototype, "checkFn", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checkFn;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._checkFn = value;
        },
        enumerable: true,
        configurable: true
    });
    return InViewportConfig;
}());
export { InViewportConfig };
function InViewportConfig_tsickle_Closure_declarations() {
    /** @type {?} */
    InViewportConfig.prototype._root;
    /** @type {?} */
    InViewportConfig.prototype._rootMargin;
    /** @type {?} */
    InViewportConfig.prototype._threshold;
    /** @type {?} */
    InViewportConfig.prototype._partial;
    /** @type {?} */
    InViewportConfig.prototype._direction;
    /** @type {?} */
    InViewportConfig.prototype._checkFn;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW4tdmlld3BvcnQtY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctaW4tdmlld3BvcnQvIiwic291cmNlcyI6WyJsaWIvaW4tdmlld3BvcnQtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7VUFDUyxNQUFNO2NBQ0YsVUFBVTtnQkFDUixZQUFZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0IzQixxQkFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUVqQyxJQUFBO0lBUUUsMEJBQVksT0FBaUM7UUFBN0MsaUJBUUM7MkJBZDZCLGlCQUFpQjsyQ0FDSCxpQkFBaUI7d0JBQ2pDLElBQUk7MEJBQ2dCLHlCQUF5QixDQUFDLElBQUk7UUFJNUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLGlCQUFpQixDQUFDLENBQUMsQ0FBQztZQUNsRSxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSTtnQkFDbEYsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2pDLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzVCO2FBQ0YsQ0FBQyxDQUFDO1NBQ0o7S0FDRjswQkFFVSxrQ0FBSTs7Ozs7WUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQzs7Ozs7O2tCQUdKLEtBQWM7WUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDOzs7OzswQkFHdEQsd0NBQVU7Ozs7O1lBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDOzs7Ozs7a0JBR0osS0FBYTtZQUNqQyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUM7Ozs7OzBCQUd6RSx1Q0FBUzs7Ozs7WUFDbEIsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7Ozs7OztrQkFHSixLQUF3QjtZQUMzQyxxQkFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQ25CLHFCQUFNLGdCQUFnQixHQUFHLFVBQUMsR0FBUSxJQUFLLE9BQUEsT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBL0MsQ0FBK0MsQ0FBQztZQUN2RixFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLFNBQVMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3JCO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ2hELFNBQVMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQXJCLENBQXFCLENBQUMsQ0FBQzthQUMxRDtZQUNELEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0IsU0FBUyxvQkFBTyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ3BDO1lBQ0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7Ozs7OzBCQUduQixxQ0FBTzs7Ozs7WUFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7Ozs7OztrQkFHSixLQUFjO1lBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7Ozs7MEJBR2YsdUNBQVM7Ozs7O1lBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDOzs7Ozs7a0JBR0osS0FBZ0M7WUFDbkQscUJBQU0sWUFBWSxHQUFHLFVBQUMsR0FBUTtnQkFDNUIsTUFBTSxDQUFDLENBQ0w7b0JBQ0UseUJBQXlCLENBQUMsSUFBSTtvQkFDOUIseUJBQXlCLENBQUMsVUFBVTtvQkFDcEMseUJBQXlCLENBQUMsUUFBUTtpQkFDbkMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUNwQixDQUFDO2FBQ0gsQ0FBQztZQUNGLElBQUksQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQzs7Ozs7MEJBR3RFLHFDQUFPOzs7OztZQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzs7Ozs7O2tCQUdKLEtBQThCO1lBQy9DLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDOzs7OzsyQkE3RzFCO0lBK0dDLENBQUE7QUFwRkQsNEJBb0ZDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGVudW0gSW5WaWV3cG9ydENvbmZpZ0RpcmVjdGlvbiB7XG4gIEJPVEggPSAnYm90aCcsXG4gIFZFUlRJQ0FMID0gJ3ZlcnRpY2FsJyxcbiAgSE9SSVpPTlRBTCA9ICdob3Jpem9udGFsJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluVmlld3BvcnRDb25maWdDaGVja0ZuT3B0aW9ucyB7XG4gIGZvcmNlOiBib29sZWFuO1xuICBjb25maWc6IEluVmlld3BvcnRDb25maWc7XG59XG5cbmV4cG9ydCB0eXBlIEluVmlld3BvcnRDb25maWdDaGVja0ZuID0gKFxuICBlbnRyeTogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeSxcbiAgb3B0aW9uczogSW5WaWV3cG9ydENvbmZpZ0NoZWNrRm5PcHRpb25zXG4pID0+IGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBJblZpZXdwb3J0Q29uZmlnT3B0aW9ucyB7XG4gIHJvb3Q/OiBFbGVtZW50O1xuICByb290TWFyZ2luPzogc3RyaW5nO1xuICB0aHJlc2hvbGQ/OiBudW1iZXIgfCBudW1iZXJbXTtcbiAgcGFydGlhbD86IGJvb2xlYW47XG4gIGRpcmVjdGlvbj86IEluVmlld3BvcnRDb25maWdEaXJlY3Rpb247XG4gIGNoZWNrRm4/OiBJblZpZXdwb3J0Q29uZmlnQ2hlY2tGbjtcbn1cblxuY29uc3QgREVGQVVMVF9USFJFU0hPTEQgPSBbMCwgMV07XG5cbmV4cG9ydCBjbGFzcyBJblZpZXdwb3J0Q29uZmlnIHtcbiAgcHJpdmF0ZSBfcm9vdDogRWxlbWVudDtcbiAgcHJpdmF0ZSBfcm9vdE1hcmdpbjogc3RyaW5nID0gJzBweCAwcHggMHB4IDBweCc7XG4gIHByaXZhdGUgX3RocmVzaG9sZDogbnVtYmVyIHwgbnVtYmVyW10gPSBbLi4uREVGQVVMVF9USFJFU0hPTERdO1xuICBwcml2YXRlIF9wYXJ0aWFsOiBib29sZWFuID0gdHJ1ZTtcbiAgcHJpdmF0ZSBfZGlyZWN0aW9uOiBJblZpZXdwb3J0Q29uZmlnRGlyZWN0aW9uID0gSW5WaWV3cG9ydENvbmZpZ0RpcmVjdGlvbi5CT1RIO1xuICBwcml2YXRlIF9jaGVja0ZuOiBJblZpZXdwb3J0Q29uZmlnQ2hlY2tGbjtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zPzogSW5WaWV3cG9ydENvbmZpZ09wdGlvbnMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9wdGlvbnMpID09PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgICAgWydyb290JywgJ3Jvb3RNYXJnaW4nLCAndGhyZXNob2xkJywgJ3BhcnRpYWwnLCAnZGlyZWN0aW9uJywgJ2NoZWNrRm4nXS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgdGhpc1twcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQgcm9vdCgpOiBFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgcm9vdCh2YWx1ZTogRWxlbWVudCkge1xuICAgIHRoaXMuX3Jvb3QgPSB2YWx1ZSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIGdldCByb290TWFyZ2luKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3RNYXJnaW47XG4gIH1cblxuICBwdWJsaWMgc2V0IHJvb3RNYXJnaW4odmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3Jvb3RNYXJnaW4gPSB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiAnMHB4IDBweCAwcHggMHB4JztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdGhyZXNob2xkKCk6IG51bWJlciB8IG51bWJlcltdIHtcbiAgICByZXR1cm4gdGhpcy5fdGhyZXNob2xkO1xuICB9XG5cbiAgcHVibGljIHNldCB0aHJlc2hvbGQodmFsdWU6IG51bWJlciB8IG51bWJlcltdKSB7XG4gICAgbGV0IHRocmVzaG9sZCA9IFtdO1xuICAgIGNvbnN0IGlzVmFsaWRUaHJlc2hvbGQgPSAodmFsOiBhbnkpID0+IHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmIHZhbCA+PSAwICYmIHZhbCA8PSAxO1xuICAgIGlmIChpc1ZhbGlkVGhyZXNob2xkKHZhbHVlKSkge1xuICAgICAgdGhyZXNob2xkID0gW3ZhbHVlXTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCkge1xuICAgICAgdGhyZXNob2xkID0gdmFsdWUuZmlsdGVyKCh2YWwpID0+IGlzVmFsaWRUaHJlc2hvbGQodmFsKSk7XG4gICAgfVxuICAgIGlmICh0aHJlc2hvbGQubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJlc2hvbGQgPSBbLi4uREVGQVVMVF9USFJFU0hPTERdO1xuICAgIH1cbiAgICB0aGlzLl90aHJlc2hvbGQgPSB0aHJlc2hvbGQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHBhcnRpYWwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcnRpYWw7XG4gIH1cblxuICBwdWJsaWMgc2V0IHBhcnRpYWwodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9wYXJ0aWFsID0gISF2YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZGlyZWN0aW9uKCk6IEluVmlld3BvcnRDb25maWdEaXJlY3Rpb24ge1xuICAgIHJldHVybiB0aGlzLl9kaXJlY3Rpb247XG4gIH1cblxuICBwdWJsaWMgc2V0IGRpcmVjdGlvbih2YWx1ZTogSW5WaWV3cG9ydENvbmZpZ0RpcmVjdGlvbikge1xuICAgIGNvbnN0IGlzVmFsaWRWYWx1ZSA9ICh2YWw6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgW1xuICAgICAgICAgIEluVmlld3BvcnRDb25maWdEaXJlY3Rpb24uQk9USCxcbiAgICAgICAgICBJblZpZXdwb3J0Q29uZmlnRGlyZWN0aW9uLkhPUklaT05UQUwsXG4gICAgICAgICAgSW5WaWV3cG9ydENvbmZpZ0RpcmVjdGlvbi5WRVJUSUNBTFxuICAgICAgICBdLmluZGV4T2YodmFsKSA+PSAwXG4gICAgICApO1xuICAgIH07XG4gICAgdGhpcy5fZGlyZWN0aW9uID0gaXNWYWxpZFZhbHVlKHZhbHVlKSA/IHZhbHVlIDogSW5WaWV3cG9ydENvbmZpZ0RpcmVjdGlvbi5CT1RIO1xuICB9XG5cbiAgcHVibGljIGdldCBjaGVja0ZuKCk6IEluVmlld3BvcnRDb25maWdDaGVja0ZuIHtcbiAgICByZXR1cm4gdGhpcy5fY2hlY2tGbjtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgY2hlY2tGbih2YWx1ZTogSW5WaWV3cG9ydENvbmZpZ0NoZWNrRm4pIHtcbiAgICB0aGlzLl9jaGVja0ZuID0gdmFsdWU7XG4gIH1cbn1cbiJdfQ==