/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Inject, Input, Output, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import { InViewportConfig } from './in-viewport-config';
import { InViewportService } from './in-viewport.service';
export var /** @type {?} */ InViewportMetadata = Symbol('InViewportMetadata');
var InViewportDirective = /** @class */ (function () {
    function InViewportDirective(platformId, elementRef, inViewport) {
        this.platformId = platformId;
        this.elementRef = elementRef;
        this.inViewport = inViewport;
        this.config = new InViewportConfig();
        this.subscription = new Subscription();
        this.inViewportAction = new EventEmitter();
    }
    Object.defineProperty(InViewportDirective.prototype, "options", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.config = new InViewportConfig(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InViewportDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformBrowser(this.platformId)) {
            this.inViewport.register(this.elementRef.nativeElement, this.config);
            this.subscription.add(this.inViewport.trigger$
                .pipe(filter(function (entry) { return entry && entry.target === _this.elementRef.nativeElement; }))
                .subscribe(function (entry) { return _this.emitAction(entry, false); }));
        }
        else {
            this.emitAction(undefined, true);
        }
    };
    /**
     * @return {?}
     */
    InViewportDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscription.unsubscribe();
        if (isPlatformBrowser(this.platformId)) {
            this.inViewport.unregister(this.elementRef.nativeElement, this.config);
        }
    };
    /**
     * @param {?} entry
     * @param {?} force
     * @return {?}
     */
    InViewportDirective.prototype.check = /**
     * @param {?} entry
     * @param {?} force
     * @return {?}
     */
    function (entry, force) {
        var _this = this;
        var /** @type {?} */ isVisible = function () {
            var /** @type {?} */ partiallyVisible = entry.isIntersecting || entry.intersectionRatio > 0;
            var /** @type {?} */ completelyVisible = entry.intersectionRatio >= 1;
            return _this.config.partial ? partiallyVisible : completelyVisible;
        };
        var /** @type {?} */ visible = force || !entry || isVisible();
        return _a = {}, _a[InViewportMetadata] = { entry: entry }, _a.target = this.elementRef.nativeElement, _a.visible = visible, _a;
        var _a;
    };
    /**
     * @param {?} entry
     * @param {?} force
     * @return {?}
     */
    InViewportDirective.prototype.emitAction = /**
     * @param {?} entry
     * @param {?} force
     * @return {?}
     */
    function (entry, force) {
        var /** @type {?} */ event = this.config.checkFn
            ? this.config.checkFn(entry, { force: force, config: this.config })
            : this.check(entry, force);
        this.inViewportAction.emit(event);
    };
    InViewportDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[inViewport]'
                },] },
    ];
    /** @nocollapse */
    InViewportDirective.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
        { type: ElementRef, },
        { type: InViewportService, },
    ]; };
    InViewportDirective.propDecorators = {
        "options": [{ type: Input, args: ['inViewportOptions',] },],
        "inViewportAction": [{ type: Output },],
    };
    return InViewportDirective;
}());
export { InViewportDirective };
function InViewportDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    InViewportDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    InViewportDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    InViewportDirective.propDecorators;
    /** @type {?} */
    InViewportDirective.prototype.config;
    /** @type {?} */
    InViewportDirective.prototype.subscription;
    /** @type {?} */
    InViewportDirective.prototype.inViewportAction;
    /** @type {?} */
    InViewportDirective.prototype.platformId;
    /** @type {?} */
    InViewportDirective.prototype.elementRef;
    /** @type {?} */
    InViewportDirective.prototype.inViewport;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW4tdmlld3BvcnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctaW4tdmlld3BvcnQvIiwic291cmNlcyI6WyJsaWIvaW4tdmlld3BvcnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFFTCxNQUFNLEVBQ04sV0FBVyxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBMkIsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxNQUFNLENBQUMscUJBQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7O0lBZ0I3RCw2QkFDK0IsWUFDckIsWUFDQTtRQUZxQixlQUFVLEdBQVYsVUFBVTtRQUMvQixlQUFVLEdBQVYsVUFBVTtRQUNWLGVBQVUsR0FBVixVQUFVO3NCQWJlLElBQUksZ0JBQWdCLEVBQUU7NEJBQ1gsSUFBSSxZQUFZLEVBQUU7Z0NBT0EsSUFBSSxZQUFZLEVBQU87S0FNbkY7MEJBVlEsd0NBQU87Ozs7O2tCQUFDLEtBQThCO1lBQ2hELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7Ozs7Ozs7SUFXckMsNkNBQWU7Ozs7O1FBQ3BCLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3JFLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUNuQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVE7aUJBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQyxLQUFnQyxJQUFLLE9BQUEsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssS0FBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQXZELENBQXVELENBQUMsQ0FBQztpQkFDM0csU0FBUyxDQUFDLFVBQUMsS0FBZ0MsSUFBSyxPQUFBLEtBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUE3QixDQUE2QixDQUFDLENBQ2xGLENBQUM7U0FDSDtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDbEM7Ozs7O0lBR0kseUNBQVc7Ozs7UUFDaEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNoQyxFQUFFLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN4RTs7Ozs7OztJQUdLLG1DQUFLOzs7OztjQUFDLEtBQWdDLEVBQUUsS0FBYzs7UUFDNUQscUJBQU0sU0FBUyxHQUFHO1lBQ2hCLHFCQUFNLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxjQUFjLElBQUksS0FBSyxDQUFDLGlCQUFpQixHQUFHLENBQUMsQ0FBQztZQUM3RSxxQkFBTSxpQkFBaUIsR0FBRyxLQUFLLENBQUMsaUJBQWlCLElBQUksQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1NBQ25FLENBQUM7UUFDRixxQkFBTSxPQUFPLEdBQUcsS0FBSyxJQUFJLENBQUMsS0FBSyxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBQy9DLE1BQU0sVUFBRyxHQUFDLGtCQUFrQixJQUFHLEVBQUUsS0FBSyxPQUFBLEVBQUUsRUFBRSxTQUFNLEdBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsVUFBTyxVQUFBLEtBQUc7Ozs7Ozs7O0lBR3JGLHdDQUFVOzs7OztjQUFDLEtBQWdDLEVBQUUsS0FBYztRQUNqRSxxQkFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPO1lBQy9CLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLE9BQUEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQzVELENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Z0JBdERyQyxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGNBQWM7aUJBQ3pCOzs7OzZDQWFJLE1BQU0sU0FBQyxXQUFXO2dCQWhDckIsVUFBVTtnQkFhSCxpQkFBaUI7Ozs0QkFXdkIsS0FBSyxTQUFDLG1CQUFtQjtxQ0FLekIsTUFBTTs7OEJBaENUOztTQXVCYSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPdXRwdXQsXG4gIFBMQVRGT1JNX0lEXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEluVmlld3BvcnRDb25maWcsIEluVmlld3BvcnRDb25maWdPcHRpb25zIH0gZnJvbSAnLi9pbi12aWV3cG9ydC1jb25maWcnO1xuaW1wb3J0IHsgSW5WaWV3cG9ydFNlcnZpY2UgfSBmcm9tICcuL2luLXZpZXdwb3J0LnNlcnZpY2UnO1xuXG5leHBvcnQgY29uc3QgSW5WaWV3cG9ydE1ldGFkYXRhID0gU3ltYm9sKCdJblZpZXdwb3J0TWV0YWRhdGEnKTtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2luVmlld3BvcnRdJ1xufSlcbmV4cG9ydCBjbGFzcyBJblZpZXdwb3J0RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBjb25maWc6IEluVmlld3BvcnRDb25maWcgPSBuZXcgSW5WaWV3cG9ydENvbmZpZygpO1xuICBwcml2YXRlIHJlYWRvbmx5IHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIEBJbnB1dCgnaW5WaWV3cG9ydE9wdGlvbnMnKVxuICBwcml2YXRlIHNldCBvcHRpb25zKHZhbHVlOiBJblZpZXdwb3J0Q29uZmlnT3B0aW9ucykge1xuICAgIHRoaXMuY29uZmlnID0gbmV3IEluVmlld3BvcnRDb25maWcodmFsdWUpO1xuICB9XG5cbiAgQE91dHB1dCgpIHB1YmxpYyByZWFkb25seSBpblZpZXdwb3J0QWN0aW9uOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0LFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIGluVmlld3BvcnQ6IEluVmlld3BvcnRTZXJ2aWNlXG4gICkge31cblxuICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLmluVmlld3BvcnQucmVnaXN0ZXIodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY29uZmlnKTtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZChcbiAgICAgICAgdGhpcy5pblZpZXdwb3J0LnRyaWdnZXIkXG4gICAgICAgICAgLnBpcGUoZmlsdGVyKChlbnRyeTogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeSkgPT4gZW50cnkgJiYgZW50cnkudGFyZ2V0ID09PSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCkpXG4gICAgICAgICAgLnN1YnNjcmliZSgoZW50cnk6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnkpID0+IHRoaXMuZW1pdEFjdGlvbihlbnRyeSwgZmFsc2UpKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbWl0QWN0aW9uKHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHRoaXMuaW5WaWV3cG9ydC51bnJlZ2lzdGVyKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCB0aGlzLmNvbmZpZyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVjayhlbnRyeTogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeSwgZm9yY2U6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBpc1Zpc2libGUgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwYXJ0aWFsbHlWaXNpYmxlID0gZW50cnkuaXNJbnRlcnNlY3RpbmcgfHwgZW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gPiAwO1xuICAgICAgY29uc3QgY29tcGxldGVseVZpc2libGUgPSBlbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyA+PSAxO1xuICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnBhcnRpYWwgPyBwYXJ0aWFsbHlWaXNpYmxlIDogY29tcGxldGVseVZpc2libGU7XG4gICAgfTtcbiAgICBjb25zdCB2aXNpYmxlID0gZm9yY2UgfHwgIWVudHJ5IHx8IGlzVmlzaWJsZSgpO1xuICAgIHJldHVybiB7IFtJblZpZXdwb3J0TWV0YWRhdGFdOiB7IGVudHJ5IH0sIHRhcmdldDogdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHZpc2libGUgfTtcbiAgfVxuXG4gIHByaXZhdGUgZW1pdEFjdGlvbihlbnRyeTogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeSwgZm9yY2U6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBjb25zdCBldmVudCA9IHRoaXMuY29uZmlnLmNoZWNrRm5cbiAgICAgID8gdGhpcy5jb25maWcuY2hlY2tGbihlbnRyeSwgeyBmb3JjZSwgY29uZmlnOiB0aGlzLmNvbmZpZyB9KVxuICAgICAgOiB0aGlzLmNoZWNrKGVudHJ5LCBmb3JjZSk7XG4gICAgdGhpcy5pblZpZXdwb3J0QWN0aW9uLmVtaXQoZXZlbnQpO1xuICB9XG59XG4iXX0=