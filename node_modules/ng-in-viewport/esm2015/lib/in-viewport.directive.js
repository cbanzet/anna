/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Inject, Input, Output, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import { InViewportConfig } from './in-viewport-config';
import { InViewportService } from './in-viewport.service';
export const /** @type {?} */ InViewportMetadata = Symbol('InViewportMetadata');
export class InViewportDirective {
    /**
     * @param {?} platformId
     * @param {?} elementRef
     * @param {?} inViewport
     */
    constructor(platformId, elementRef, inViewport) {
        this.platformId = platformId;
        this.elementRef = elementRef;
        this.inViewport = inViewport;
        this.config = new InViewportConfig();
        this.subscription = new Subscription();
        this.inViewportAction = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set options(value) {
        this.config = new InViewportConfig(value);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.inViewport.register(this.elementRef.nativeElement, this.config);
            this.subscription.add(this.inViewport.trigger$
                .pipe(filter((entry) => entry && entry.target === this.elementRef.nativeElement))
                .subscribe((entry) => this.emitAction(entry, false)));
        }
        else {
            this.emitAction(undefined, true);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
        if (isPlatformBrowser(this.platformId)) {
            this.inViewport.unregister(this.elementRef.nativeElement, this.config);
        }
    }
    /**
     * @param {?} entry
     * @param {?} force
     * @return {?}
     */
    check(entry, force) {
        const /** @type {?} */ isVisible = () => {
            const /** @type {?} */ partiallyVisible = entry.isIntersecting || entry.intersectionRatio > 0;
            const /** @type {?} */ completelyVisible = entry.intersectionRatio >= 1;
            return this.config.partial ? partiallyVisible : completelyVisible;
        };
        const /** @type {?} */ visible = force || !entry || isVisible();
        return { [InViewportMetadata]: { entry }, target: this.elementRef.nativeElement, visible };
    }
    /**
     * @param {?} entry
     * @param {?} force
     * @return {?}
     */
    emitAction(entry, force) {
        const /** @type {?} */ event = this.config.checkFn
            ? this.config.checkFn(entry, { force, config: this.config })
            : this.check(entry, force);
        this.inViewportAction.emit(event);
    }
}
InViewportDirective.decorators = [
    { type: Directive, args: [{
                selector: '[inViewport]'
            },] },
];
/** @nocollapse */
InViewportDirective.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    { type: ElementRef, },
    { type: InViewportService, },
];
InViewportDirective.propDecorators = {
    "options": [{ type: Input, args: ['inViewportOptions',] },],
    "inViewportAction": [{ type: Output },],
};
function InViewportDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    InViewportDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    InViewportDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    InViewportDirective.propDecorators;
    /** @type {?} */
    InViewportDirective.prototype.config;
    /** @type {?} */
    InViewportDirective.prototype.subscription;
    /** @type {?} */
    InViewportDirective.prototype.inViewportAction;
    /** @type {?} */
    InViewportDirective.prototype.platformId;
    /** @type {?} */
    InViewportDirective.prototype.elementRef;
    /** @type {?} */
    InViewportDirective.prototype.inViewport;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW4tdmlld3BvcnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctaW4tdmlld3BvcnQvIiwic291cmNlcyI6WyJsaWIvaW4tdmlld3BvcnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFFTCxNQUFNLEVBQ04sV0FBVyxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBMkIsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxNQUFNLENBQUMsdUJBQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFLL0QsTUFBTTs7Ozs7O0lBV0osWUFDK0IsWUFDckIsWUFDQTtRQUZxQixlQUFVLEdBQVYsVUFBVTtRQUMvQixlQUFVLEdBQVYsVUFBVTtRQUNWLGVBQVUsR0FBVixVQUFVO3NCQWJlLElBQUksZ0JBQWdCLEVBQUU7NEJBQ1gsSUFBSSxZQUFZLEVBQUU7Z0NBT0EsSUFBSSxZQUFZLEVBQU87S0FNbkY7Ozs7O1FBVlEsT0FBTyxDQUFDLEtBQThCO1FBQ2hELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7Ozs7SUFXckMsZUFBZTtRQUNwQixFQUFFLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyRSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRO2lCQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBZ0MsRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztpQkFDM0csU0FBUyxDQUFDLENBQUMsS0FBZ0MsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FDbEYsQ0FBQztTQUNIO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNsQzs7Ozs7SUFHSSxXQUFXO1FBQ2hCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDaEMsRUFBRSxDQUFDLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEU7Ozs7Ozs7SUFHSyxLQUFLLENBQUMsS0FBZ0MsRUFBRSxLQUFjO1FBQzVELHVCQUFNLFNBQVMsR0FBRyxHQUFHLEVBQUU7WUFDckIsdUJBQU0sZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGNBQWMsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO1lBQzdFLHVCQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLENBQUM7WUFDdkQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUM7U0FDbkUsQ0FBQztRQUNGLHVCQUFNLE9BQU8sR0FBRyxLQUFLLElBQUksQ0FBQyxLQUFLLElBQUksU0FBUyxFQUFFLENBQUM7UUFDL0MsTUFBTSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxDQUFDOzs7Ozs7O0lBR3JGLFVBQVUsQ0FBQyxLQUFnQyxFQUFFLEtBQWM7UUFDakUsdUJBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTztZQUMvQixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDNUQsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Ozs7WUF0RHJDLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYzthQUN6Qjs7Ozt5Q0FhSSxNQUFNLFNBQUMsV0FBVztZQWhDckIsVUFBVTtZQWFILGlCQUFpQjs7O3dCQVd2QixLQUFLLFNBQUMsbUJBQW1CO2lDQUt6QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEluamVjdCxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0LFxuICBQTEFURk9STV9JRFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBJblZpZXdwb3J0Q29uZmlnLCBJblZpZXdwb3J0Q29uZmlnT3B0aW9ucyB9IGZyb20gJy4vaW4tdmlld3BvcnQtY29uZmlnJztcbmltcG9ydCB7IEluVmlld3BvcnRTZXJ2aWNlIH0gZnJvbSAnLi9pbi12aWV3cG9ydC5zZXJ2aWNlJztcblxuZXhwb3J0IGNvbnN0IEluVmlld3BvcnRNZXRhZGF0YSA9IFN5bWJvbCgnSW5WaWV3cG9ydE1ldGFkYXRhJyk7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tpblZpZXdwb3J0XSdcbn0pXG5leHBvcnQgY2xhc3MgSW5WaWV3cG9ydERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgY29uZmlnOiBJblZpZXdwb3J0Q29uZmlnID0gbmV3IEluVmlld3BvcnRDb25maWcoKTtcbiAgcHJpdmF0ZSByZWFkb25seSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICBASW5wdXQoJ2luVmlld3BvcnRPcHRpb25zJylcbiAgcHJpdmF0ZSBzZXQgb3B0aW9ucyh2YWx1ZTogSW5WaWV3cG9ydENvbmZpZ09wdGlvbnMpIHtcbiAgICB0aGlzLmNvbmZpZyA9IG5ldyBJblZpZXdwb3J0Q29uZmlnKHZhbHVlKTtcbiAgfVxuXG4gIEBPdXRwdXQoKSBwdWJsaWMgcmVhZG9ubHkgaW5WaWV3cG9ydEFjdGlvbjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IE9iamVjdCxcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBpblZpZXdwb3J0OiBJblZpZXdwb3J0U2VydmljZVxuICApIHt9XG5cbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5pblZpZXdwb3J0LnJlZ2lzdGVyKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCB0aGlzLmNvbmZpZyk7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGQoXG4gICAgICAgIHRoaXMuaW5WaWV3cG9ydC50cmlnZ2VyJFxuICAgICAgICAgIC5waXBlKGZpbHRlcigoZW50cnk6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnkpID0+IGVudHJ5ICYmIGVudHJ5LnRhcmdldCA9PT0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpKVxuICAgICAgICAgIC5zdWJzY3JpYmUoKGVudHJ5OiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5KSA9PiB0aGlzLmVtaXRBY3Rpb24oZW50cnksIGZhbHNlKSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW1pdEFjdGlvbih1bmRlZmluZWQsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLmluVmlld3BvcnQudW5yZWdpc3Rlcih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5jb25maWcpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2soZW50cnk6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnksIGZvcmNlOiBib29sZWFuKSB7XG4gICAgY29uc3QgaXNWaXNpYmxlID0gKCkgPT4ge1xuICAgICAgY29uc3QgcGFydGlhbGx5VmlzaWJsZSA9IGVudHJ5LmlzSW50ZXJzZWN0aW5nIHx8IGVudHJ5LmludGVyc2VjdGlvblJhdGlvID4gMDtcbiAgICAgIGNvbnN0IGNvbXBsZXRlbHlWaXNpYmxlID0gZW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gPj0gMTtcbiAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5wYXJ0aWFsID8gcGFydGlhbGx5VmlzaWJsZSA6IGNvbXBsZXRlbHlWaXNpYmxlO1xuICAgIH07XG4gICAgY29uc3QgdmlzaWJsZSA9IGZvcmNlIHx8ICFlbnRyeSB8fCBpc1Zpc2libGUoKTtcbiAgICByZXR1cm4geyBbSW5WaWV3cG9ydE1ldGFkYXRhXTogeyBlbnRyeSB9LCB0YXJnZXQ6IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCB2aXNpYmxlIH07XG4gIH1cblxuICBwcml2YXRlIGVtaXRBY3Rpb24oZW50cnk6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnksIGZvcmNlOiBib29sZWFuKTogdm9pZCB7XG4gICAgY29uc3QgZXZlbnQgPSB0aGlzLmNvbmZpZy5jaGVja0ZuXG4gICAgICA/IHRoaXMuY29uZmlnLmNoZWNrRm4oZW50cnksIHsgZm9yY2UsIGNvbmZpZzogdGhpcy5jb25maWcgfSlcbiAgICAgIDogdGhpcy5jaGVjayhlbnRyeSwgZm9yY2UpO1xuICAgIHRoaXMuaW5WaWV3cG9ydEFjdGlvbi5lbWl0KGV2ZW50KTtcbiAgfVxufVxuIl19