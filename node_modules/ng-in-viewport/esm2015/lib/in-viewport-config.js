/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
const InViewportConfigDirection = {
    BOTH: 'both',
    VERTICAL: 'vertical',
    HORIZONTAL: 'horizontal',
};
export { InViewportConfigDirection };
/**
 * @record
 */
export function InViewportConfigCheckFnOptions() { }
function InViewportConfigCheckFnOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    InViewportConfigCheckFnOptions.prototype.force;
    /** @type {?} */
    InViewportConfigCheckFnOptions.prototype.config;
}
/**
 * @record
 */
export function InViewportConfigOptions() { }
function InViewportConfigOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    InViewportConfigOptions.prototype.root;
    /** @type {?|undefined} */
    InViewportConfigOptions.prototype.rootMargin;
    /** @type {?|undefined} */
    InViewportConfigOptions.prototype.threshold;
    /** @type {?|undefined} */
    InViewportConfigOptions.prototype.partial;
    /** @type {?|undefined} */
    InViewportConfigOptions.prototype.direction;
    /** @type {?|undefined} */
    InViewportConfigOptions.prototype.checkFn;
}
const /** @type {?} */ DEFAULT_THRESHOLD = [0, 1];
export class InViewportConfig {
    /**
     * @param {?=} options
     */
    constructor(options) {
        this._rootMargin = '0px 0px 0px 0px';
        this._threshold = [...DEFAULT_THRESHOLD];
        this._partial = true;
        this._direction = InViewportConfigDirection.BOTH;
        if (Object.prototype.toString.call(options) === '[object Object]') {
            ['root', 'rootMargin', 'threshold', 'partial', 'direction', 'checkFn'].forEach((prop) => {
                if (options.hasOwnProperty(prop)) {
                    this[prop] = options[prop];
                }
            });
        }
    }
    /**
     * @return {?}
     */
    get root() {
        return this._root;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set root(value) {
        this._root = value && value.nodeType === 1 ? value : undefined;
    }
    /**
     * @return {?}
     */
    get rootMargin() {
        return this._rootMargin;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set rootMargin(value) {
        this._rootMargin = value && typeof value === 'string' ? value : '0px 0px 0px 0px';
    }
    /**
     * @return {?}
     */
    get threshold() {
        return this._threshold;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set threshold(value) {
        let /** @type {?} */ threshold = [];
        const /** @type {?} */ isValidThreshold = (val) => typeof val === 'number' && val >= 0 && val <= 1;
        if (isValidThreshold(value)) {
            threshold = [value];
        }
        else if (Array.isArray(value) && value.length) {
            threshold = value.filter((val) => isValidThreshold(val));
        }
        if (threshold.length === 0) {
            threshold = [...DEFAULT_THRESHOLD];
        }
        this._threshold = threshold;
    }
    /**
     * @return {?}
     */
    get partial() {
        return this._partial;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set partial(value) {
        this._partial = !!value;
    }
    /**
     * @return {?}
     */
    get direction() {
        return this._direction;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set direction(value) {
        const /** @type {?} */ isValidValue = (val) => {
            return ([
                InViewportConfigDirection.BOTH,
                InViewportConfigDirection.HORIZONTAL,
                InViewportConfigDirection.VERTICAL
            ].indexOf(val) >= 0);
        };
        this._direction = isValidValue(value) ? value : InViewportConfigDirection.BOTH;
    }
    /**
     * @return {?}
     */
    get checkFn() {
        return this._checkFn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set checkFn(value) {
        this._checkFn = value;
    }
}
function InViewportConfig_tsickle_Closure_declarations() {
    /** @type {?} */
    InViewportConfig.prototype._root;
    /** @type {?} */
    InViewportConfig.prototype._rootMargin;
    /** @type {?} */
    InViewportConfig.prototype._threshold;
    /** @type {?} */
    InViewportConfig.prototype._partial;
    /** @type {?} */
    InViewportConfig.prototype._direction;
    /** @type {?} */
    InViewportConfig.prototype._checkFn;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW4tdmlld3BvcnQtY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctaW4tdmlld3BvcnQvIiwic291cmNlcyI6WyJsaWIvaW4tdmlld3BvcnQtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztVQUNTLE1BQU07Y0FDRixVQUFVO2dCQUNSLFlBQVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQjNCLHVCQUFNLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRWpDLE1BQU07Ozs7SUFRSixZQUFZLE9BQWlDOzJCQU5mLGlCQUFpQjswQkFDUCxDQUFDLEdBQUcsaUJBQWlCLENBQUM7d0JBQ2xDLElBQUk7MEJBQ2dCLHlCQUF5QixDQUFDLElBQUk7UUFJNUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLGlCQUFpQixDQUFDLENBQUMsQ0FBQztZQUNsRSxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ3RGLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUM1QjthQUNGLENBQUMsQ0FBQztTQUNKO0tBQ0Y7Ozs7UUFFVSxJQUFJO1FBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7Ozs7OztRQUdULElBQUksQ0FBQyxLQUFjO1FBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQzs7Ozs7UUFHdEQsVUFBVTtRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQzs7Ozs7O1FBR2YsVUFBVSxDQUFDLEtBQWE7UUFDakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDOzs7OztRQUd6RSxTQUFTO1FBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDOzs7Ozs7UUFHZCxTQUFTLENBQUMsS0FBd0I7UUFDM0MscUJBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQix1QkFBTSxnQkFBZ0IsR0FBRyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztRQUN2RixFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDckI7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNoRCxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMxRDtRQUNELEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixTQUFTLEdBQUcsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLENBQUM7U0FDcEM7UUFDRCxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQzs7Ozs7UUFHbkIsT0FBTztRQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzs7Ozs7O1FBR1osT0FBTyxDQUFDLEtBQWM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDOzs7OztRQUdmLFNBQVM7UUFDbEIsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7Ozs7OztRQUdkLFNBQVMsQ0FBQyxLQUFnQztRQUNuRCx1QkFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtZQUNoQyxNQUFNLENBQUMsQ0FDTDtnQkFDRSx5QkFBeUIsQ0FBQyxJQUFJO2dCQUM5Qix5QkFBeUIsQ0FBQyxVQUFVO2dCQUNwQyx5QkFBeUIsQ0FBQyxRQUFRO2FBQ25DLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FDcEIsQ0FBQztTQUNILENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUM7Ozs7O1FBR3RFLE9BQU87UUFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7Ozs7OztRQUdaLE9BQU8sQ0FBQyxLQUE4QjtRQUMvQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQzs7Q0FFekIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBJblZpZXdwb3J0Q29uZmlnRGlyZWN0aW9uIHtcbiAgQk9USCA9ICdib3RoJyxcbiAgVkVSVElDQUwgPSAndmVydGljYWwnLFxuICBIT1JJWk9OVEFMID0gJ2hvcml6b250YWwnXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5WaWV3cG9ydENvbmZpZ0NoZWNrRm5PcHRpb25zIHtcbiAgZm9yY2U6IGJvb2xlYW47XG4gIGNvbmZpZzogSW5WaWV3cG9ydENvbmZpZztcbn1cblxuZXhwb3J0IHR5cGUgSW5WaWV3cG9ydENvbmZpZ0NoZWNrRm4gPSAoXG4gIGVudHJ5OiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5LFxuICBvcHRpb25zOiBJblZpZXdwb3J0Q29uZmlnQ2hlY2tGbk9wdGlvbnNcbikgPT4gYW55O1xuXG5leHBvcnQgaW50ZXJmYWNlIEluVmlld3BvcnRDb25maWdPcHRpb25zIHtcbiAgcm9vdD86IEVsZW1lbnQ7XG4gIHJvb3RNYXJnaW4/OiBzdHJpbmc7XG4gIHRocmVzaG9sZD86IG51bWJlciB8IG51bWJlcltdO1xuICBwYXJ0aWFsPzogYm9vbGVhbjtcbiAgZGlyZWN0aW9uPzogSW5WaWV3cG9ydENvbmZpZ0RpcmVjdGlvbjtcbiAgY2hlY2tGbj86IEluVmlld3BvcnRDb25maWdDaGVja0ZuO1xufVxuXG5jb25zdCBERUZBVUxUX1RIUkVTSE9MRCA9IFswLCAxXTtcblxuZXhwb3J0IGNsYXNzIEluVmlld3BvcnRDb25maWcge1xuICBwcml2YXRlIF9yb290OiBFbGVtZW50O1xuICBwcml2YXRlIF9yb290TWFyZ2luOiBzdHJpbmcgPSAnMHB4IDBweCAwcHggMHB4JztcbiAgcHJpdmF0ZSBfdGhyZXNob2xkOiBudW1iZXIgfCBudW1iZXJbXSA9IFsuLi5ERUZBVUxUX1RIUkVTSE9MRF07XG4gIHByaXZhdGUgX3BhcnRpYWw6IGJvb2xlYW4gPSB0cnVlO1xuICBwcml2YXRlIF9kaXJlY3Rpb246IEluVmlld3BvcnRDb25maWdEaXJlY3Rpb24gPSBJblZpZXdwb3J0Q29uZmlnRGlyZWN0aW9uLkJPVEg7XG4gIHByaXZhdGUgX2NoZWNrRm46IEluVmlld3BvcnRDb25maWdDaGVja0ZuO1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBJblZpZXdwb3J0Q29uZmlnT3B0aW9ucykge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob3B0aW9ucykgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICBbJ3Jvb3QnLCAncm9vdE1hcmdpbicsICd0aHJlc2hvbGQnLCAncGFydGlhbCcsICdkaXJlY3Rpb24nLCAnY2hlY2tGbiddLmZvckVhY2goKHByb3ApID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICB0aGlzW3Byb3BdID0gb3B0aW9uc1twcm9wXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCByb290KCk6IEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLl9yb290O1xuICB9XG5cbiAgcHVibGljIHNldCByb290KHZhbHVlOiBFbGVtZW50KSB7XG4gICAgdGhpcy5fcm9vdCA9IHZhbHVlICYmIHZhbHVlLm5vZGVUeXBlID09PSAxID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHJvb3RNYXJnaW4oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdE1hcmdpbjtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgcm9vdE1hcmdpbih2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fcm9vdE1hcmdpbiA9IHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZSA6ICcwcHggMHB4IDBweCAwcHgnO1xuICB9XG5cbiAgcHVibGljIGdldCB0aHJlc2hvbGQoKTogbnVtYmVyIHwgbnVtYmVyW10ge1xuICAgIHJldHVybiB0aGlzLl90aHJlc2hvbGQ7XG4gIH1cblxuICBwdWJsaWMgc2V0IHRocmVzaG9sZCh2YWx1ZTogbnVtYmVyIHwgbnVtYmVyW10pIHtcbiAgICBsZXQgdGhyZXNob2xkID0gW107XG4gICAgY29uc3QgaXNWYWxpZFRocmVzaG9sZCA9ICh2YWw6IGFueSkgPT4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgdmFsID49IDAgJiYgdmFsIDw9IDE7XG4gICAgaWYgKGlzVmFsaWRUaHJlc2hvbGQodmFsdWUpKSB7XG4gICAgICB0aHJlc2hvbGQgPSBbdmFsdWVdO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICB0aHJlc2hvbGQgPSB2YWx1ZS5maWx0ZXIoKHZhbCkgPT4gaXNWYWxpZFRocmVzaG9sZCh2YWwpKTtcbiAgICB9XG4gICAgaWYgKHRocmVzaG9sZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocmVzaG9sZCA9IFsuLi5ERUZBVUxUX1RIUkVTSE9MRF07XG4gICAgfVxuICAgIHRoaXMuX3RocmVzaG9sZCA9IHRocmVzaG9sZDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgcGFydGlhbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fcGFydGlhbDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgcGFydGlhbCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3BhcnRpYWwgPSAhIXZhbHVlO1xuICB9XG5cbiAgcHVibGljIGdldCBkaXJlY3Rpb24oKTogSW5WaWV3cG9ydENvbmZpZ0RpcmVjdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuX2RpcmVjdGlvbjtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgZGlyZWN0aW9uKHZhbHVlOiBJblZpZXdwb3J0Q29uZmlnRGlyZWN0aW9uKSB7XG4gICAgY29uc3QgaXNWYWxpZFZhbHVlID0gKHZhbDogYW55KSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBbXG4gICAgICAgICAgSW5WaWV3cG9ydENvbmZpZ0RpcmVjdGlvbi5CT1RILFxuICAgICAgICAgIEluVmlld3BvcnRDb25maWdEaXJlY3Rpb24uSE9SSVpPTlRBTCxcbiAgICAgICAgICBJblZpZXdwb3J0Q29uZmlnRGlyZWN0aW9uLlZFUlRJQ0FMXG4gICAgICAgIF0uaW5kZXhPZih2YWwpID49IDBcbiAgICAgICk7XG4gICAgfTtcbiAgICB0aGlzLl9kaXJlY3Rpb24gPSBpc1ZhbGlkVmFsdWUodmFsdWUpID8gdmFsdWUgOiBJblZpZXdwb3J0Q29uZmlnRGlyZWN0aW9uLkJPVEg7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGNoZWNrRm4oKTogSW5WaWV3cG9ydENvbmZpZ0NoZWNrRm4ge1xuICAgIHJldHVybiB0aGlzLl9jaGVja0ZuO1xuICB9XG5cbiAgcHVibGljIHNldCBjaGVja0ZuKHZhbHVlOiBJblZpZXdwb3J0Q29uZmlnQ2hlY2tGbikge1xuICAgIHRoaXMuX2NoZWNrRm4gPSB2YWx1ZTtcbiAgfVxufVxuIl19